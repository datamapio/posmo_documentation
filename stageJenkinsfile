pipeline {
    agent any
    stages {
        stage('Deploy') {
            steps {
              echo "Deploying now"

              echo "compress files"
              sh "tar -cvf sdk-docs-${env.BUILD_ID}.tar ."

              echo "copy build"
              sh "ssh staging mkdir /var/www/sdk-docs-build/sdk-docs-${env.BUILD_ID}"
              sh "scp ./sdk-docs-${env.BUILD_ID}.tar staging:/var/www/sdk-docs-build/sdk-docs-${env.BUILD_ID}/sdk-docs-${env.BUILD_ID}.tar"
              sh "ssh staging tar -xf /var/www/sdk-docs-build/sdk-docs-${env.BUILD_ID}/sdk-docs-${env.BUILD_ID}.tar -C /var/www/sdk-docs-build/sdk-docs-${env.BUILD_ID}/"

              echo "change sdk-docs symlink"
              sh "ssh staging ln -sfn /var/www/sdk-docs-build/sdk-docs-${env.BUILD_ID} /var/www/sdk-docs"

              echo "restart node server"
              sh "ssh staging supervisorctl reload sdk-docs"
              sh "ssh staging sudo service nginx reload"

            }
        }
    }

    post {
        always {
            notifyBuild(currentBuild.currentResult)
        }
    }
}

//SLACK

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}
